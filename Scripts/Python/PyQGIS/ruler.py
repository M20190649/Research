epsilon = 10.0
crs = 6423
instance = QgsProject.instance()

names = ['Cliques', 'PCliques', 'Centres', 'Circles', 'Extremes', 'Diameters']
for name in names:
	layers = instance.mapLayersByName(name)
	for layer in layers:
		instance.removeMapLayer(layer)
iface.mapCanvas().refresh()
for name in names:
	uri = "file:///tmp/edges{}.wkt?delimiter={}&useHeader=no&crs=epsg:{}&wktField={}".format(name, "\\t", crs, "field_1")
	layer = iface.addVectorLayer(uri, name, "delimitedtext")
	if name == "Cliques":
		symbol = QgsFillSymbol.createSimple({'color_border': 'black', 'color': 'gray'})
		renderer = QgsRuleBasedRenderer(symbol)
		root_rule = renderer.rootRule()
		rule = root_rule.children()[0].clone()
		root_rule.children()[0].setActive(False)
		rule.setFilterExpression("\"field_2\" = attribute(@atlas_feature, 'field_2')")
		root_rule.appendChild(rule)
		layer.setRenderer(renderer)
		layer.triggerRepaint()
	elif name == "PCliques":
		symbol = QgsMarkerSymbol.createSimple({'color': 'cyan', 'border_color': 'cyan', 'size': '2.0'})
		renderer = QgsRuleBasedRenderer(symbol)
		root_rule = renderer.rootRule()
		rule = root_rule.children()[0].clone()
		root_rule.children()[0].setActive(False)
		rule.setFilterExpression("\"field_2\" = attribute(@atlas_feature, 'field_2')")
		root_rule.appendChild(rule)
		layer.setRenderer(renderer)
		layer.triggerRepaint()		
	elif name == "Circles":
		symbol = QgsFillSymbol.createSimple({'color_border': 'blue', 'style': 'no', 'style_border': 'dash'})
		renderer = QgsRuleBasedRenderer(symbol)
		root_rule = renderer.rootRule()
		rule = root_rule.children()[0].clone()
		root_rule.children()[0].setActive(False)
		rule.setFilterExpression("\"field_2\" = attribute(@atlas_feature, 'field_2')")
		root_rule.appendChild(rule)
		layer.setRenderer(renderer)
		layer.triggerRepaint()
	elif name == "Centres":
		symbol = QgsMarkerSymbol.createSimple({'color': 'green', 'border_color': 'gren', 'size': '1.5'})
		renderer = QgsRuleBasedRenderer(symbol)
		root_rule = renderer.rootRule()
		rule = root_rule.children()[0].clone()
		root_rule.children()[0].setActive(False)
		rule.setFilterExpression("\"field_2\" = attribute(@atlas_feature, 'field_2')")
		root_rule.appendChild(rule)
		layer.setRenderer(renderer)
		layer.triggerRepaint()
	elif name == "Extremes":
		symbol = QgsMarkerSymbol.createSimple({'color': 'orange', 'border_color': 'orange', 'size': '2.0'})
		renderer = QgsRuleBasedRenderer(symbol)
		root_rule = renderer.rootRule()
		rule = root_rule.children()[0].clone()
		root_rule.children()[0].setActive(False)
		rule.setFilterExpression("\"field_2\" = attribute(@atlas_feature, 'field_2')")
		root_rule.appendChild(rule)
		layer.setRenderer(renderer)
		layer.triggerRepaint()
	elif name == "Diameters":
		symbol = QgsLineSymbol.createSimple({'line_color': 'black', 'style_border': 'dash'})
		renderer = QgsRuleBasedRenderer(symbol)
		root_rule = renderer.rootRule()
		rule = root_rule.children()[0].clone()
		root_rule.children()[0].setActive(False)
		rule.setFilterExpression("\"field_2\" = attribute(@atlas_feature, 'field_2')")
		root_rule.appendChild(rule)
		layer.setRenderer(renderer)
		layer.triggerRepaint()
	iface.layerTreeView().refreshLayerSymbology(layer.id())
