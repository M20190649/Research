import com.vividsolutions.jts.geom.{Coordinate, Envelope, GeometryFactory}
import org.slf4j.{LoggerFactory, Logger}
import org.apache.spark.serializer.KryoSerializer
import org.apache.spark.storage.StorageLevel
import org.apache.spark.{SparkConf, SparkContext}
import org.datasyslab.geospark.enums.{FileDataSplitter, GridType, IndexType}
import org.datasyslab.geospark.formatMapper.shapefileParser.ShapefileReader
import org.datasyslab.geospark.spatialOperator.{JoinQuery, KNNQuery, RangeQuery}
import org.datasyslab.geospark.spatialRDD.{CircleRDD, PointRDD, PolygonRDD}
import org.datasyslab.geosparkviz.core.Serde.GeoSparkVizKryoRegistrator


/**
* The Class ScalaExample.
*/
object Tester extends App{
  private val logger: Logger = LoggerFactory.getLogger("myLogger")
  private val debug: Boolean = false
  private val epsilon: Double = 100.0

  // Starting session...
  var timer = System.currentTimeMillis()
  val conf = new SparkConf().setAppName("GeoSparkTester").setMaster("local[*]")
  conf.set("spark.serializer", classOf[KryoSerializer].getName)
  conf.set("spark.kryo.registrator", classOf[GeoSparkVizKryoRegistrator].getName)
  val sc = new SparkContext(conf)
  log("Session started", timer)

  val PointRDDInputLocation = "/home/acald013/Research/Datasets/Berlin/berlin0-0.tsv"
  val PointRDDSplitter = FileDataSplitter.TSV
  val PointRDDIndexType = IndexType.RTREE
  val PointRDDNumPartitions = 5
  val PointRDDOffset = 0

  //val joinQueryPartitioningType = GridType.QUADTREE
  val eachQueryLoopTimes=5
  //testDistanceJoinQuery()
  //testDistanceJoinQueryUsingIndex()

  // Reading data...
  timer = System.currentTimeMillis()
  val dataset = "/home/acald013/Research/Datasets/Berlin/berlin0-0.tsv"
  val points = new PointRDD(sc, dataset, 1, FileDataSplitter.TSV, true, StorageLevel.MEMORY_ONLY)
  points.CRSTransform("epsg:3068", "epsg:3068")
  val nPoints = points.rawSpatialRDD.count()
  log("Data read", timer, nPoints)

  if(debug) {
    points.rawSpatialRDD.rdd
      .map[String](p => s"${p.getX} ${p.getY} ${p.getUserData.asInstanceOf[String]}")
      .foreach(println)
  }

  // Getting pairs...
  timer = System.currentTimeMillis()
  points.analyze()
  val buffer = new CircleRDD(points, epsilon)
  buffer.analyze()
  buffer.spatialPartitioning(GridType.QUADTREE)
  points.spatialPartitioning(buffer.getPartitioner)
  val considerBoundary = true
  val usingIndex = false

  val result = JoinQuery.DistanceJoinQueryFlat(points, buffer, usingIndex, considerBoundary)
    .rdd.map{ pair =>
      val id1 = pair._1.getUserData().toString().split("\t").head.trim().toInt
      val p1  = pair._1.getCentroid
      val id2 = pair._2.getUserData().toString().split("\t").head.trim().toInt
      val p2  = pair._2
      ( (id1, p1) , (id2, p2) )
    }.filter(p => p._1._1 < p._2._1).map(p => (p._1._2, p._2._2))
  val nResult = result.count()
  log("", timer)
  result.foreach(println)


  // Closing session...
  timer = System.currentTimeMillis()
  sc.stop()
  log("Session closed", timer)

  /**
    * Test spatial join query.
    *
    * @throws Exception the exception
    */
  def testDistanceJoinQuery() {
    val objectRDD = new PointRDD(sc, PointRDDInputLocation, PointRDDOffset, PointRDDSplitter, true, StorageLevel.MEMORY_ONLY)
    val queryWindowRDD = new CircleRDD(objectRDD,0.2)
    objectRDD.spatialPartitioning(GridType.QUADTREE)
    queryWindowRDD.spatialPartitioning(objectRDD.getPartitioner)
    objectRDD.spatialPartitionedRDD.persist(StorageLevel.MEMORY_ONLY)
    queryWindowRDD.spatialPartitionedRDD.persist(StorageLevel.MEMORY_ONLY)

    for(i <- 1 to eachQueryLoopTimes)
    {
      val resultSize = JoinQuery.DistanceJoinQuery(objectRDD,queryWindowRDD,false,true).count()
    }
  }

  /**
    * Test spatial join query using index.
    *
    * @throws Exception the exception
    */
  def testDistanceJoinQueryUsingIndex() {
    val objectRDD = new PointRDD(sc, PointRDDInputLocation, PointRDDOffset, PointRDDSplitter, true, StorageLevel.MEMORY_ONLY)
    val queryWindowRDD = new CircleRDD(objectRDD,0.2)

    objectRDD.spatialPartitioning(GridType.QUADTREE)
    queryWindowRDD.spatialPartitioning(objectRDD.getPartitioner)

    objectRDD.buildIndex(IndexType.RTREE,true)

    objectRDD.indexedRDD.persist(StorageLevel.MEMORY_ONLY)
    queryWindowRDD.spatialPartitionedRDD.persist(StorageLevel.MEMORY_ONLY)
    for(i <- 1 to eachQueryLoopTimes)
    {
      val resultSize = JoinQuery.DistanceJoinQuery(objectRDD,queryWindowRDD,true,true).count
    }
  }

  def log(msg: String, timer: Long, n: Long = 0, tag: String = ""): Unit ={
    if(n == 0)
      logger.info("%-50s|%6.2f".format(msg,(System.currentTimeMillis()-timer)/1000.0))
    else
      logger.info("%-50s|%6.2f|%6d|%s".format(msg,(System.currentTimeMillis()-timer)/1000.0,n,tag))
  }
}
